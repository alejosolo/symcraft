//L=limit, S=start_tile, F=search_target  H=heuristic M=can_move_to?
aStar L S F H M = !VsI+1 = u 0:[S ø 0] |
  <:next [[_ O]@Os] = C:O,0 = G:O,2
     = {F C = O,<[N P:y @_]=[@P,r N]> // backtrace path
       ;√ = {G≤L = NG:G+1 = k M C,cell.neibs
                 | e <N = I:N,cellIndex
                        = {(aget I Vs)≤≥VsI = hins NG+(H N) [N O NG] !Os
                                            = aset I VsI Vs}>}
          = next Os}>

m:cmtm M L P = T:\&T
 = \(= $T:(cell $P).mask = (and $T $M)≤≥0 $@{L = \(|a (and $T $L)≥≤0)})

canMoveTo   P U = M:U.mask = L:U.layer = xy @P @U.size | all (cmtm M L ?)
canMoveToNB P U = M:U.mask = xy @P @U.size | all (cmtm M ø ?)

moveFn U = M:U.mask = L:U.layer
  = U.size,<[1 1] = (cmtm M L ?)
           ;[W H] = <P = xy @P W H | all (cmtm M L ?)>>

m:hD T = \<&V = abs $T-&V>

findPath U F H L:{PFRange} = aStar L U.tile F H U,moveFn
findTile S F H M L:{PFRange} = aStar L S F H M

moveUnit P U
 = Id:U.id = S:U.sight = [UW UH]:U.size = V: sign P-U.tile = [VX VY]:V
 = [UX UY]:U.tile = BX:UX+{VX≥0 = ~S; S+UW-1} = BY:UY+{VY≥0 = ~S; S+UH-1}
 = {VY≤≥0 = Y:BY*WW = E:Y+UX+S+UW
          = for (I:Y+UX-S; I≤E; !I+1)
            (= C:aget I Cells = s Id !C.sensors = aset I C Cells)}
 = {VX≤≥0 = E:(UY+S+UH)*WW+BX
          = for (I:(UY-S)*WW+BX; I≤E; !I+WW)
            (= C:aget I Cells = s Id !C.sensors = aset I C Cells)}
 = [UX UY]:P = BX:UX+{VX≥0 = S+UW-1; ~S} = BY:UY+{VY≥0 = S+UH-1; ~S}
 = {VY≤≥0 = Y:BY*WW = E:Y+UX+S+UW
          = for (I:Y+UX-S; I≤E; !I+1)
            (= C:aget I Cells =l @!C.sensors Id = aset I C Cells)}
 = {VX≤≥0 = E:(UY+S+UH)*WW+BX
          = for (I:(UY-S)*WW+BX; I≤E; !I+WW)
            (= C:aget I Cells =l @!C.sensors Id = aset I C Cells)}
 = U|u tile:P dir:V | anim \move

followPath U = Id:U.id = P:U.path
 = updArea U <C = sf Id !C.content = xor !C.mask U.layer>
 = pos U,moveFn P | <0=; ø = !P:ø
                    ;I = Q:P,I = !P:{F:findPath U ?≥≤Q Q,hD L:5 =l @F @(d I+1 P)}>
 = {[H@T]:P = moveUnit H !U = !U.path:T}
 = updArea U <C =l @!C.content Id = xor !C.mask U.layer>
 = {P=U}

findNeibTile F T S = {F T=T; √ = findTile T F (S-?),abs y L:3 | rhd}

rngPath U D A Reached Moved Failed
 = DT:D.tile = DS:{A.asz;D.size} = R:A.range
 = V:U.size-[1 1] = DR:l @(DT-[R R]-V) @(DS+[2R 2R]+V)
 = {inRect DR U.tile = c Reached
   ;P:U,followPath = Moved P
   ;√ = flipUnitLayer U
      = T: findNeibTile (canMoveTo ? U |a inRect DR ?) DT+DS%2 U.tile
      = !U.path:{T = findPath U ?≥≤T T,hD L:{A.wait=16; PFRange}}
      = flipUnitLayer U
      = {U.path=Moved U,followPath; c Failed}}

buildRect P U T Flip:{√} = S:T.size = PS:xy @P @T.size = E:T.extends
 = {E |a any <P = all Units,?.type≤≥E P,cell.content> PS
      = [W H]:S = vec W*H
   ;√ = MM:T.mask = BM:T.layer = Flip |a flipUnitLayer U
      = BR: PS | m <P = C:P,cell = CM:C.mask = (and CM MM)≤≥0 |a (and CM BM)≥≤0>
          |c:Cs {F:T.rule = {F P=Cs; Cs,len,vec}
                ;√ = Cs}
      = Flip |a flipUnitLayer U = BR}

findDeployTile S D U L:{PFRange} = {canMoveTo S U = S
                                   ;√ = findTile S (canMoveTo ? U) D,hD y L:L | rhd}

findDepot R U
 = Ds: Units | k <X = X.hp,pos? |a X.depot.R |a X.owner≥≤U.owner>
 = Depot:ø = Ids: m ?.id Ds = Ts: m ?.tile Ds
 = Ds |a findTile U.tile <N = !Depot: any (any ? Ids) N,cell.content>
                         <N = m (?-N),abs Ts | sum>
                         (canMoveToNB ? U)
 = Depot

findFrom U P F L:{PFRange} = XY:U.tile
 = flipUnitLayer U // first we find the nearest free tile
 = P:{(abs U.tile-P)≤2 = XY
     ;canMoveTo P U = P
     ;√ = findTile P (canMoveTo ? U) XY,hD y L:6 | rhd}
 = flipUnitLayer U
 = {F: P |a findTile P F P,hD y L:L = F,rhd,cell.id}

resourceMerge R = flipUnitLayer R = Z: R | k <[<(any ? ResNames);\id;\resource> _]>
 = xy @R.tile @R.size | e <P = C:P,cell = setCell P :: u C Z saved:C>
resourceUnmerge R = xy @R.tile @R.size | e:P setCell P P,cell.saved = flipUnitLayer R
findResource U P A L:{PFRange} R:{√} = A:A,<sym?=UTs.A;A=A> = Rs:ø
 = {R = !Rs: k ?.resource 16,unitsOf = e resourceMerge Rs}
 = F:findFrom U P <P = canHarvest P,cell A> L:L
 = e resourceUnmerge Rs
 = F
 