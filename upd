attackAct U = UTs.(any UTs.?.effect,<\hit> U.acts)
harvestAct U = m UTs.? U.acts | k ?.harvests | lhd

selectCells R U:{√} = Is: xy @R | m cellIndex
                    = {U = l@!Is @(m Units,?.content Is | j | uniq)}
                    = Is

rmCell C = Trns.[0 C.rm],<R:y = !C: u ~@C.resource Tiles,R type:C.base = updNeibs C.tile>
         = C

rmXY XY = updUnit XY,cellIndex rmCell = ø

cellFace O X = {inRect WR X | n = cellFace X O
               ;√ = N: (dirN O-X)%2 = C:X,cell = E:C.edges = P:[C.base C.type]
                  = shr E 3N | and 7 | digits 2 | pad 3 0 | m P,?}

newTerra C = XY:C.tile = T:C.type = B:C.base = Dirs | i | filter:[D even?] D
           | m <P = cellFace XY XY+P | m <(T)=1; (B)=0; _=w newTerra>> | j
           | <[N0 N1 N2 M0 M1 M2 N3 N4 N5 M3 M4 M5]
                = N:[N0 N1 N2 M4 1 M1 N3 N4 N5] = M:[M3 N1 M0 M4 1 M1 M5 N4 M2]
                = m ?*?? N M | grp 3 | calcEdges>

updTerra I = updUnit I <C = T:C.type = B:C.base = N:{inRect WR C.tile = C,newTerra}
 = B |a N≤≥C.edges |a Trns.[E2I.N T],<ø = rmCell !C; I = u !C Tiles,I>
 = C>

doFire U = A:U.act
         = {F:Units,(A.target).fire = U|u gfxes:F.gfxes anims:F.anims
           ;√ = order \die U}

combust T U
 = {U.building = U.fire,<ø = O: UTs.fire|u target:U.id
                           = spawnFx U.tile T D:U,centerDisp-[16 40] O:O>
               = !U.fire:UTs.T}
 = U

unitHit U As = H:U.hp = W:U.hits
 = {pos? H-W |a n U.effects.unholy_armor,pos?
     = BH:U,hp100 = Is: m ?.effect As,units
     = D: Is|m:[B P] (max 1 B-U.armor)+P | sum
     = !U.hits: clip 0 U.hp W+D = AH:U,hp100
     = {AH≥≤0 = {U.tileId = rmCell !U
                ; √ = !U.anim:ø = order \die U}
       ;AH≤50 |a BH≥≥50 = combust \fire_big !U
       ;AH≤75 |a BH≥≥75 = combust \fire_small !U
       ;BH≤75 |a AH≥≥75 = !U.fire:ø}
     = O:U.owner = T:time,c
     = {AH≤BH |a O≥≤ThisPlayer |a T-LastHelp ≥ 60
         = O:Units,O = !LastHelp:T = notify U.owner “We are being attacked!”
         = O.id≥≤ThisPlayer |a unitSay “$(O.side)_help_${U.building=\building;\unit}” O}
     }
 = U

unitHarvest U Is = R:U.resource
 = units Is | e <I = Src:I.src = V:I.effect
   = {U.R,pos? = [[U.id R V]@!NQs.Src.add] = !U.R-V
               = {n U.R,pos? = {U.tileId = !U: rmCell ~@U.resource
                               ;√ = showKids U | order \die}}}>
 = U

unitSet U Is = units Is | e <I = I.effect !U Units,(I.id)> = U
unitInc U Is = Is | e:[Src N V] !U.N+V = U

pickEnemy U Is = A:U.act = D:U.act.dst,<I:int?=Units,I>
 = {U.damage,n;U.role,<\worker>; Orders.(U.id); A.effect,<\hit=D.damage;_=A.type>
   ;W: U,attackAct = m Units,? Is | k (canAttack U W ?) | c:Es {D = s ?.damage,n Es; Es}
                   | sort by:<E = l {~E.damage;0} :: abs E.tile-U.tile>
                   | c:[E@_] {D |a E.damage,n | n = order (W|u dst:E.id range:U.range) U}}

unitSee U Is = 2,rand,<0 = pickEnemy U Is> = U
Reacs =u add:unitInc see:unitSee hit:unitHit set:unitSet harvest:unitHarvest

spawnFx XY T D:{ø} O:{\die} = U: unit 0 T |u tile:XY disp:{D;32XY}
 = anim \still !U = order O U = U,mark = l@!NewUnits U

impact U = Q:<T = l@!NQs.T.(U.qualia) U.id>
 = {S:U.splash = selectCells [@(U.tile-[S S]) @[2S+1 2S+1]]
               | k Units,?,<T:y=and U.mask T.mask | nz? |a U.layer≥≥T.layer> | m Q
   ;√ = Q U.dst}
 = unitSay \hit U = {I:U.impact = spawnFx U.tile I D:U,centerDisp-16UTs.I.size}


placeBuilding R U H T = B:UTs.T = S:U.tile+(dup 2 [1 ~1],pick*(5,rand+5)) = B.depot,0,0
 | <:back ø = findFrom U S <P = buildRect P U B Flip:ø | all y |a all even? P> L:40
            | <P:y = U | order (u UTs.build dst:P what:T oCost:B.cost asz:B.size)>
   ;D = {R: findResource U U.tile H = !S:Units,R,center} = back ø>

attackNearbyEnemy U = {U,int? = !U:Units,U}
                    = findFrom U U.tile <P = P,cell.content | any:I enemyOf Units,I U>
                    | <E:y = order (u U,attackAct dst:E) U = √>

Build = cfg “$Data/cfg/build.txt”
planAI P = Gold:2 = O:P.id = [Us Bs]: k ?.disp O,unitsOf | s Orders.(?.id) | div ?.building
  = [Ws Ps]: Us | k harvestAct | div ?.act.type,<\build> = !Ps | m UTs.(?.act.what).role = Needs:ø
  = !P.grps | m1:Xs k Units,?,selectable? Xs
  = P.grps | e:[N Xs] (k Units,?.act,n Xs | e <U = attackNearbyEnemy U |v (sf U !P.grps.N)>)
  = Ls: Build | c:[L@Ls]
    {L,<[\attack N @Xs] = {P.grps.N,n = Xs | m <[_ R N] = ownedRoles O R | s:U (m ?,1 P.grps | any:Z any U.id Z) | t N>
                                      | j | m ?.id | do !P.grps.N
                                      = !P.grpState.N:\attack}>
    ;L | m:[_ R N] [R N-(ownedRoles O R),len-(cnt R Ps)] | k ?,1,pos? | m ?,0
    ;r Ls}
  = Ls|c:[R@Ls]
    {Ws,pick|c:W {T: any UTs.?.role,<(R)> W.builds
                    = {C:chkCost P UTs.T.cost = !Needs:C,lhd,lhd = ø
                      ;√ = placeBuilding R W W,harvestAct T = √}}
    ;Bs | k ?.act,n | m:B l B (any UTs.?.role,<(R)> B.trains) | k ?,1 | pick | c:[B T]
       {C:chkCost P UTs.T.cost = C,lhd,<[\food _]={any \farm [@Ls@Ps]; [\farm @!Ls]}; [C _]=!Needs:C> = ø
       ;all Owned,O.? UTs.T.deps | n = ø
       ;√ = order (u UTs.train what:T oCost:UTs.T.cost) B = √}
    ;Ls |a r Ls}
  = !Ws | s Orders.(?.id)
  = {U: Needs |a Ws | s ?.act.res,<(Needs)> | s (?|resources|any Needs) | pick
        = A:U,harvestAct = k Needs !A.harvests
        = {R:findResource U U.tile A = order (u A dst:R) U}
    ;√ = Ws | k ?.act,n | e <U = {U,resources = order \store U
                                 ;√ = A:U,harvestAct = k A.harvests,pick !A.harvests
                                    = {R:findResource U U.tile A = order (u A dst:R) U}}>}
  = P

planRescue P = P,unitsOf | s Orders.(?.id)
             | e <U = U,neibs | m ?,cell.content | j | k y | m Units,? | e <R = O:Units,(R.owner)
                      = {O.playable = order (u UTs.rescue newOwner:R.owner) U}>>
planNeutral P = k ?.role,<\critter> P,unitsOf
              | e:U order (u UTs.move dst:U.tile,cell.neibs,pick,cell.id) U
              = P

doPlan P = {P.rescueable=P,planRescue} = {P.passive=P; P.side,<\neutral>=P,planNeutral; P,planAI}

doMissile U = TOD:U.tod = XY:ø = !XY:U,centerDisp%32
 = U.move
 | <[\rotates R] = !U.angle+R = T:Units,(U.dst)
                 = {T = !U.disp: angled T 32 U.angle = !XY: round U.disp/32
                   ;√ = !TOD:Cycle}
   ;\trap = {U.tile,cell.content | k Units,?.layer,<(MCs.2)> = impact U = act \die !U = !U.anim:ø}
   ;\wanders = !U.disp + [(randRng ~2 2) (randRng ~2 2)] = !XY:U.disp%32>
 = {U.inc = !U.inc+1 = mod U.inc 8 | <0 = C: l @XY,cell.content XY,cellIndex
                                        = {U.ignoresDst = s U.dst C; C} | e:T (u U dst:T),impact>}
 = {XY≤≥U.tile = {U.bounces,pos? |a TOD≤Cycle = impact U = !U.bounces-1}
               = U,unmark = !U.tile:XY = U,mark}
 = {Cycle≤TOD |v U.bounces,pos? =
   ;√ = {U.bounces; U.inc; impact U} = act \die !U = !U.anim:ø}
 = U

spawnMissile M O Src Dst Delay:{0} Sound:{√} = V:(Dst-Src)/32
 = U: unit O M Delay:Delay |u disp:Src tile:Src%32 dir:V/(max 1 V,abs)
 = !U.tod: Cycle + {U.ttl; V,abs*U.speed}
 = {Sound = unitSay \shot U
   ;√ = {10,rand≤7 = !U.sounds.hit:ø}}
 = order \missile U = U,mark =l @!NewUnits U

doEffect U
 = A:U.with = T:A.dst = D:Units,T = N:A.effect
 = {N |a D,targetable?
     = E:U.damage
     = N,<\hit = !E+A.damage = {U.effects.bloodlust,pos? = !E*2}
         ;[\heal X] = !N:\hit
                    = {MC:A.uCost.mana
                         = S:X,sign = V:X*S = H:{S≤0=D.hp-D.hits; D.hits}
                         = X:(H+V-1)%V = C: min U.mana+MC MC*X = V:(C+MC)%MC*V*S
                         = !U.mana+(MC-C) = !E:[0 ~V-1]
                      ;√ = !E:[0 ~X-1]}
         ;[A B] = !N:A = !E:B>
     = M: u A dst:D.id src:U.id qualia:N effect:E ttl:A.cycles
     = S:{A.shards;1} = MS:16M.size = DC:D,centerDisp = WH:A.area = O:A.offset
     = rng S | e <I = Dst:{WH = WH|m:X randRng ~X X | 32?+DC
                          ;√ = DC}
                    = Src:O,<n = U,centerDisp
                            ;\circle = X:I*2PI/S = !M.angle:X = angled D 32 X
                            ;O = Dst+O>
                    = spawnMissile M U.owner Src-MS Dst-MS Sound:I≤1 Delay:S,rand>}
 = U

updAct A U
 = DI:A.dst = D:Units,DI
 = {D,n = !U.act:ø
   ;√ = rngPath U D A
        <= {D,targetable? |v U.id≥≤DI |a canAct U A D
              = ~@A.uCost.time | e:[R V] !U.R-V
              = ~@A.oCost.time | e:[R V] [[U.id R ~V]@!NQs.(U.owner).add]
              = DC:D,center = UC:U,center = {DC≤≥UC = !U.dir:DC-UC}
              = !U.with:U.act = {S:A.show = anim S !U; doEffect !U}
              = U.disp |a unitSay A.say U
              = {F:A.do = F !U; !U.act:ø}
           ;√ = {F:A.fix = F !U; !U.act:ø}}>
        <X = !U:X = !U.act:~@U.act.wait = U>
        <= {A.wait≤5 = !U.act.wait+1
           ;F:A.fix = F !U
           ;√ = !U.act:ø}>}
 = U

rotateFacing F = F:(pos F Dirs)+[~1 1],pick
               = Dirs,{F≤0=7; F≥7=0; √=F}

updAnim U = Es:U.effects
 = {U.disp = Id:U.id = Ss:u id:√ = P:U.tile
           = P,cell.sensors|e:S {Ss.S,n = !Ss.S:√ = [Id@!NQs.S.see]}}
 = U.anim
 | <:b [[F W @M]:xs?@As] = !U |u frame:F anim:As
                         = M,<[M] = !U.disp: int U.disp+U.dir*M>
                         = {W,pos? = {Es = {Es.haste,pos? = !W:(W+1)%2
                                           ;Es.slow,pos? = !W*3}
                                         = !U.effects: m1 ?-W Es}
                                   = sched W updAnim U
                       ;√ = b ø}
      ;[   ] = anim \still !U = {A:U.act = updAct A !U} = b U.anim
      ;[\rotate@As] = 100,rand,<0 = rotateFacing !U.dir> = b As
      ;[\attack@As] = doEffect !U = b As
      ;[\upd@As] = {A:U.act = updAct A !U} = b As
      ;[\shipAttack@As] = A: dirN Units,(U.with.dst).tile-U.tile
                        = {A = !U.dir: Dirs,(mod A+2 8)}
                        = doEffect !U = b As
      ;[A@As] = error “invalid anim: $A for $(U.uiName) #$(Unit.id)”
      >
 = U


updUnit Id F = {U:Units,Id = aset Id (F U) Units}

hide [H I] = updUnit I <U
 = updUnit H <P = {{P.transport;999} ≥ P.kids,len
                      = !U.parent:H =l @!P.kids I
                      = swapAnim \still \working !P
                      = ~@!Orders.I = U,unmark = !U.disp:ø}
                = P>
 = U>

show I = U:Units,I
 ={U,n |v U.disp =
  ;PI:U.parent = P:Units,PI
               = {P.transport = findDeployTile P.tile P.tile U L:1
                 ;√ = findDeployTile U.tile U.tile U}
               | <T:y = sf I !P.kids = {P.kids; swapAnim \still \still !P}
                      = !U.parent:ø = aset PI P Units = deployUnit T U>
  ;√ = T: findDeployTile U.tile U.tile U = deployUnit T U}

upgrade T U = {T,sym? = !T:UTs.T} = T.upgrade|m:[N V] !U.N+V = U
upgradeUnit [S D] = updUnit S (upgrade D ?)
upgradeUnits O S D =l @!Trans @(m [upgradeUnit [? D]] Owned,O.S | j)
morphUnit [S D] = updUnit S (morph D ?)
morphUnits O S D =l @!Trans @(m [morphUnit [? D]] Owned,O.S | j)
kid [P K] = updUnit P <P =l @!P.kids K> = updUnit K <K=!K.parent:P>
unkid [P K] = updUnit P <P = s K !P.kids>
rekid P U =l @!Trans unkid [Units,U.parent U] kid [P U]
showKids U =l @!Trans @(m [show ?] U.kids | j) = U
updNeibs P =l @!Trans @(Dirs | i | filter:[D even?] D |m:D l updTerra (cellIndex D+P) | j) = P

sched T F U = l@!Scheds.(Cycle+T) F U.id
updMana U = {U.mp = {U.mana≤U.mp = !U.mana+1} = sched 24 r U} = U
updTTL U = {U.ttl = {U.ttl≥0 = !U.ttl-24; order\die U} = sched 24 r U} = U

// All must work like following:
// - players and AI give orders
// - units take actions according to orders
// - engine updates units and provides back action results
// - result displayed on screen
// Q: what happens when two units compete to unload their content in the same place at the same time?
// A: move from the first unit. message second unit about failure
// Q: what happens when two units compete to move into the same cell?
// A: move the first unit. message second unit about failure

updUnits
 = NewUnits|e:U aset U.id U Units = !NewUnits:[]
 = Orders|e:[I O] updUnit I <U = {actGT O U.act = act O U; U}> = !Orders:[]
 = Scheds.Cycle | grp 2 |e:[F U] updUnit U F = ~@!Scheds.Cycle
 = !Qs:NQs = !NQs:[]
 = Qs|e:[I Is] updUnit I <U = Is |e:[Q Xs] (Reacs.Q !U Xs) = U>
 = NewUnits|e:U aset U.id U Units = !NewUnits:[]
 = Ts:Trans = !Trans:[] = grp 2 Ts |e:[F A] F A
 = e delUnit DelUnits = !DelUnits:[] = !Cycle+1
